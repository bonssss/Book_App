{"version":3,"file":"chapa-nodejs.cjs.production.min.js","sources":["../src/enums/chapa-urls.enum.ts","../src/enums/split-type.enum.ts","../src/http-exception.ts","../src/validations/initialize.validation.ts","../src/validations/verify.validation.ts","../src/validations/create-subaccount.validation.ts","../src/chapa.ts"],"sourcesContent":["export enum ChapaUrls {\n  INITIALIZE = 'https://api.chapa.co/v1/transaction/initialize',\n  MOBILE_INITIALIZE = 'https://api.chapa.co/v1/transaction/mobile-initialize',\n  VERIFY = 'https://api.chapa.co/v1/transaction/verify',\n  BANKS = 'https://api.chapa.co/v1/banks',\n  SUBACCOUNT = 'https://api.chapa.co/v1/subaccount',\n}\n","export enum SplitType {\n  PERCENTAGE = 'percentage',\n  FLAT = 'flat',\n}\n","export class HttpException extends Error {\n  public status: number;\n  constructor(message: string, status: number) {\n    super(message);\n    this.status = status;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n","import * as yup from 'yup';\nimport { InitializeOptions } from '../interfaces/initialize.interface';\n\nexport const validateInitializeOptions = async (\n  initializeOptions: InitializeOptions\n) => {\n  const schema = yup.object().shape({\n    first_name: yup.string().required(),\n    last_name: yup.string().required(),\n    email: yup.string().email(),\n    currency: yup.string().required(),\n    amount: yup.string().required(),\n    tx_ref: yup.string().required(),\n    callback_url: yup\n      .string()\n      .url()\n      .optional(),\n    return_url: yup\n      .string()\n      .url()\n      .optional(),\n    customization: yup\n      .object()\n      .shape({\n        title: yup.string().optional(),\n        description: yup.string().optional(),\n        logo: yup.string().optional(),\n      })\n      .optional(),\n    subaccounts: yup\n      .array()\n      .of(\n        yup.object().shape({\n          id: yup.string().required(),\n          split_type: yup.string().optional(),\n          transaction_charge: yup.string().optional(),\n        })\n      )\n      .nullable()\n      .optional(),\n  });\n\n  return await schema.validate(initializeOptions);\n};\n","import * as yup from 'yup';\nimport { VerifyOptions } from '../interfaces/verify.interface';\n\nexport const validateVerifyOptions = async (verifyOptions: VerifyOptions) => {\n  const schema = yup.object().shape({\n    tx_ref: yup.string().required(),\n  });\n\n  return await schema.validate(verifyOptions);\n};\n","import * as yup from 'yup';\nimport { SplitType } from '../enums';\nimport { CreateSubaccountOptions } from '../interfaces';\n\nexport const validateCreateSubaccountOptions = async (\n  createSubaccountOptions: CreateSubaccountOptions,\n) => {\n  const schema = yup.object().shape({\n    business_name: yup.string().required(),\n    account_name: yup.string().required(),\n    bank_code: yup.string().required(),\n    account_number: yup.string().required(),\n    split_type: yup.mixed().oneOf(Object.values(SplitType)).required(),\n    split_value: yup.number().required(),\n  });\n\n  return await schema.validate(createSubaccountOptions);\n};\n","import axios from 'axios';\nimport { customAlphabet } from 'nanoid/async';\nimport { alphanumeric } from 'nanoid-dictionary';\nimport { ChapaUrls } from './enums';\nimport { HttpException } from './http-exception';\nimport {\n  ChapaOptions,\n  CreateSubaccountOptions,\n  CreateSubaccountResponse,\n  GenerateTransactionReferenceOptions,\n  GetBanksResponse,\n  InitializeOptions,\n  InitializeResponse,\n  VerifyOptions,\n  VerifyResponse,\n} from './interfaces';\nimport {\n  validateCreateSubaccountOptions,\n  validateInitializeOptions,\n  validateVerifyOptions,\n} from './validations';\n\ninterface IChapa {\n  initialize(initializeOptions: InitializeOptions): Promise<InitializeResponse>;\n  mobileInitialize(\n    initializeOptions: InitializeOptions\n  ): Promise<InitializeResponse>;\n  verify(VerifyOptions: VerifyOptions): Promise<VerifyResponse>;\n  generateTransactionReference(\n    generateTransactionReferenceOptions?: GenerateTransactionReferenceOptions\n  ): Promise<string>;\n  getBanks(): Promise<GetBanksResponse>;\n  createSubaccount(\n    createSubaccountOptions: CreateSubaccountOptions\n  ): Promise<CreateSubaccountResponse>;\n}\nexport class Chapa implements IChapa {\n  constructor(private chapaOptions: ChapaOptions) {}\n\n  async initialize(\n    initializeOptions: InitializeOptions\n  ): Promise<InitializeResponse> {\n    try {\n      await validateInitializeOptions(initializeOptions);\n\n      const response = await axios.post<InitializeResponse>(\n        ChapaUrls.INITIALIZE,\n        initializeOptions,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async mobileInitialize(\n    initializeOptions: InitializeOptions\n  ): Promise<InitializeResponse> {\n    try {\n      await validateInitializeOptions(initializeOptions);\n\n      const response = await axios.post<InitializeResponse>(\n        ChapaUrls.MOBILE_INITIALIZE,\n        initializeOptions,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n  async verify(verifyOptions: VerifyOptions): Promise<VerifyResponse> {\n    try {\n      await validateVerifyOptions(verifyOptions);\n      const response = await axios.get<VerifyResponse>(\n        `${ChapaUrls.VERIFY}/${verifyOptions.tx_ref}`,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async generateTransactionReference(\n    generateTransactionReferenceOptions?: GenerateTransactionReferenceOptions\n  ): Promise<string> {\n    const prefix =\n      generateTransactionReferenceOptions &&\n      generateTransactionReferenceOptions.prefix\n        ? generateTransactionReferenceOptions.prefix\n        : 'TX';\n    const size =\n      generateTransactionReferenceOptions &&\n      generateTransactionReferenceOptions.size\n        ? generateTransactionReferenceOptions.size\n        : 15;\n    const nanoid = customAlphabet(alphanumeric, size);\n    const reference = await nanoid();\n    return `${prefix}-${reference.toUpperCase()}`;\n  }\n\n  async getBanks(): Promise<GetBanksResponse> {\n    try {\n      const banks = await axios.get<GetBanksResponse>(ChapaUrls.BANKS, {\n        headers: {\n          Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n        },\n      });\n      return banks.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async createSubaccount(\n    createSubaccountOptions: CreateSubaccountOptions\n  ): Promise<CreateSubaccountResponse> {\n    try {\n      await validateCreateSubaccountOptions(createSubaccountOptions);\n      const response = await axios.post<CreateSubaccountResponse>(\n        ChapaUrls.SUBACCOUNT,\n        createSubaccountOptions,\n        {\n          headers: {\n            Authorization: `Bearer ${this.chapaOptions.secretKey}`,\n          },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new HttpException(\n          error.response.data.message,\n          error.response.status\n        );\n      } else if (error.name === 'ValidationError') {\n        throw new HttpException(error.errors[0], 400);\n      } else {\n        throw error;\n      }\n    }\n  }\n}\n"],"names":["ChapaUrls","SplitType","HttpException","message","status","_this","Error","captureStackTrace","constructor","validateInitializeOptions","initializeOptions","schema","yup","shape","first_name","required","last_name","email","currency","amount","tx_ref","callback_url","url","optional","return_url","customization","title","description","logo","subaccounts","of","id","split_type","transaction_charge","nullable","_context","validate","validateVerifyOptions","verifyOptions","validateCreateSubaccountOptions","createSubaccountOptions","business_name","account_name","bank_code","account_number","oneOf","Object","values","split_value","chapaOptions","this","_proto","initialize","axios","post","INITIALIZE","headers","Authorization","secretKey","data","response","name","errors","mobileInitialize","_context2","MOBILE_INITIALIZE","verify","_context3","get","VERIFY","generateTransactionReference","generateTransactionReferenceOptions","prefix","nanoid","customAlphabet","alphanumeric","size","_context4","toUpperCase","getBanks","_context5","BANKS","createSubaccount","_context6","SUBACCOUNT"],"mappings":"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"}