"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var uuid_1 = require("uuid");
var chapaUrl = 'https://api.chapa.co/v1';
var Axios = axios_1.default.create({
    baseURL: chapaUrl,
    headers: {
        'Content-Type': 'application/json',
    },
    validateStatus: function () { return true; },
});
var Chapa = /** @class */ (function () {
    function Chapa(chapaKey) {
        this.customization = {};
        this.chapaKey = chapaKey;
    }
    /**
     *
     * @param customizationInfo
     */
    Chapa.prototype.customize = function (customizationInfo) {
        var expectedParams = ['title', 'description', 'logo'];
        var wrongParams = Object.keys(customizationInfo).filter(function (key) { return !expectedParams.includes(key); });
        if (wrongParams.length > 0) {
            throw new Error("The CustomizationInfo has ".concat(wrongParams.length, " wrong paramater '").concat(__spreadArray([], wrongParams, true), "'"));
        }
        this.customization = customizationInfo;
    };
    /**
     *
     * @returns uuid txRef
     */
    Chapa.prototype.generateTxRef = function () {
        return (0, uuid_1.v4)();
    };
    /**
     *
     * @param initializeInfo
     * @param initializeOptions
     * @returns
     */
    Chapa.prototype.initialize = function (initializeInfo, initializeOptions) {
        var _this = this;
        if (initializeOptions === void 0) { initializeOptions = {
            autoTx_ref: false,
        }; }
        var requiredParams = ['amount', 'first_name', 'tx_ref', 'last_name', 'currency'];
        if (initializeOptions.autoTx_ref) {
            requiredParams.splice(3, 1);
        }
        var missingParams = [];
        missingParams = requiredParams.filter(function (key) { return !initializeInfo.hasOwnProperty(key); });
        if (missingParams.length > 0) {
            throw new Error("The initializeInfo has ".concat(missingParams.length, " missing required paramater '").concat(__spreadArray([], missingParams, true), "'"));
        }
        return new Promise(function (resolve, reject) {
            var paylodad = initializeOptions.autoTx_ref
                ? __assign(__assign({}, initializeInfo), { tx_ref: (0, uuid_1.v4)(), customization: _this.customization }) : __assign(__assign({}, initializeInfo), { customization: _this.customization });
            Axios({
                url: "/transaction/initialize",
                method: 'post',
                data: paylodad,
                headers: {
                    Authorization: 'Bearer ' + _this.chapaKey,
                },
            })
                .then(function (response) {
                response.status === 200 ? resolve(response.data) : reject(response.data);
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     *
     * @param tnxRef
     * @returns
     */
    Chapa.prototype.verify = function (tnxRef) {
        var _this = this;
        if (!tnxRef)
            throw new Error('Transaction refrence is required!');
        return new Promise(function (resolve, reject) {
            Axios({
                url: "/transaction/verify/".concat(tnxRef),
                method: 'get',
                headers: {
                    Authorization: 'Bearer ' + _this.chapaKey,
                },
            })
                .then(function (response) {
                response.status === 200 ? resolve(response.data) : reject(response.data);
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     *
     * @param transferInfo
     * @returns
     */
    Chapa.prototype.transfer = function (transferInfo) {
        var _this = this;
        var requiredParams = [
            'account_name',
            'account_number',
            'amount',
            'currency',
            'beneficiary_name',
            'reference',
            'bank_code',
        ];
        var missingParams = [];
        missingParams = requiredParams.filter(function (key) { return !transferInfo.hasOwnProperty(key); });
        if (missingParams.length > 0) {
            throw new Error("The transferInfo has ".concat(missingParams.length, " missing required paramater '").concat(__spreadArray([], missingParams, true), "'"));
        }
        return new Promise(function (resolve, reject) {
            Axios({
                url: "/transfers",
                method: 'post',
                data: transferInfo,
                headers: {
                    Authorization: 'Bearer ' + _this.chapaKey,
                },
            })
                .then(function (response) {
                response.status === 200 ? resolve(response.data) : reject(response.data);
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     *
     * @returns
     */
    Chapa.prototype.getBanks = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            Axios({
                url: '/banks',
                method: 'get',
                headers: {
                    Authorization: 'Bearer ' + _this.chapaKey,
                },
            })
                .then(function (response) {
                response.status === 200 ? resolve(response.data) : reject(response.data);
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     *
     * @returns
     */
    Chapa.prototype.createSubAccount = function (subaccount) {
        var _this = this;
        var requiredParams = [
            'business_name',
            'account_name',
            'split_type',
            'account_number',
            'bank_code',
            'split_value',
        ];
        var missingParams = [];
        missingParams = requiredParams.filter(function (key) { return !subaccount.hasOwnProperty(key); });
        if (missingParams.length > 0) {
            throw new Error("The Subaccount has ".concat(missingParams.length, " missing required paramater '").concat(__spreadArray([], missingParams, true), "'"));
        }
        return new Promise(function (resolve, reject) {
            Axios({
                url: '/subaccount',
                method: 'post',
                data: subaccount,
                headers: {
                    Authorization: 'Bearer ' + _this.chapaKey,
                },
            })
                .then(function (response) {
                response.status === 200 ? resolve(response.data) : reject(response.data);
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    return Chapa;
}());
exports.default = Chapa;
